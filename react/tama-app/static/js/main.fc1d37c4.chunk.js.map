{"version":3,"sources":["components/TaskItem.js","actions/index.js","constants/ActionTypes.js","components/TaskList.js","components/TaskForm.js","components/TaskSearchControl.js","components/TaskSortControl.js","components/TaskControl.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/itemEditing.js","reducers/search.js","reducers/sort.js","reducers/index.js","index.js"],"names":["TaskItem","onUpdateStatus","_this","props","task","id","onDeleteItem","onDeleteTask","onCloseForm","onEditTask","onOpenForm","react_default","a","createElement","className","this","status","onClick","index","name","showStatusElement","type","Component","connect","state","dispatch","actions","TaskList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","event","target","value","parseInt","setState","defineProperty","filterName","filterStatus","elmTasks","_this$props","tasks","keyword","sort","_this$state","length","filter","toLowerCase","indexOf","by","b","map","components_TaskItem","key","placeholder","search","TaskForm","onClearState","addOrUpdateTaskFromProps","itemEditing","console","log","onHandleChange","onSaveTask","preventDefault","nextProps","isDisplayForm","onSubmit","required","autoFocus","TaskSearchControl","onSearch","TaskSortControl","sortBy","sortValue","sortObj","onSort","localStorage","setItem","JSON","stringify","parse","getItem","_this2","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","TaskControl","components_TaskSearchControl","components_TaskSortControl","App","onAddTask","onClearItemEditing","elmTaskForm","components_TaskForm","components_TaskControl","components_TaskList","onToggleForm","Boolean","window","location","hostname","match","data","initialState","generateID","Math","random","toString","substring","findIndex","res","forEach","myReducer","newState","arguments","undefined","action","newTask","push","getStateAfterSaveTask","toConsumableArray","cloneTask","objectSpread","splice","getStateAfterDeleteTask","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAIMA,6MAEFC,eAAiB,WACbC,EAAKC,MAAMF,eAAeC,EAAKC,MAAMC,KAAKC,OAG9CC,aAAe,WACXJ,EAAKC,MAAMI,aAAaL,EAAKC,MAAMC,KAAKC,IACxCH,EAAKC,MAAMK,iBAGfC,WAAa,WACTP,EAAKC,MAAMO,aACXR,EAAKC,MAAMM,WAAWP,EAAKC,MAAMC,0FAIjC,OACIO,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,KAAKZ,MAAMC,KAAKY,OAAS,yBAA2B,uBACjEC,QAASF,KAAKd,iBACe,IAA3Bc,KAAKZ,MAAMC,KAAKY,OAAkB,SAAW,yCAMvD,OACIL,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAME,KAAKZ,MAAMe,OACjBP,EAAAC,EAAAC,cAAA,UAAME,KAAKZ,MAAMC,KAAKe,MACtBR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACRC,KAAKK,qBAEXT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACVH,EAAAC,EAAAC,cAAA,UACIQ,KAAK,SACLP,UAAU,kBACVG,QAAUF,KAAKN,YACfE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAJpB,SADJ,OAQIH,EAAAC,EAAAC,cAAA,UACIQ,KAAK,SAASP,UAAU,iBACxBG,QAAUF,KAAKT,cACfK,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAHpB,oBAzCGQ,aA4ERC,cAxBS,SAAAC,GACpB,MAAO,IAGgB,SAACC,EAAUtB,GAClC,MAAO,CACHF,eAAgB,SAACI,GACboB,EC9BgB,SAACpB,GACzB,MAAO,CACHgB,KC9B0B,qBD+B1BhB,MD2BaqB,CAAqBrB,KAElCE,aAAc,SAACF,GACXoB,EC1Bc,SAACpB,GACvB,MAAO,CACHgB,KCpCmB,cDqCnBhB,MDuBaqB,CAAmBrB,KAEhCG,YAAa,WACTiB,ECzCD,CACHJ,KC1BkB,gBFoElBX,WAAY,WACRe,EClDD,CACHJ,KCnBiB,eFsEjBZ,WAAY,SAACL,GACTqB,EC5BY,SAACrB,GACrB,MAAO,CACHiB,KC1CiB,YD2CjBjB,QDyBasB,CAAiBtB,OAKvBmB,CAA6CvB,GG5EtD2B,cAGF,SAAAA,EAAYxB,GAAO,IAAAD,EAAA,OAAA0B,OAAAC,EAAA,EAAAD,CAAAb,KAAAY,IACfzB,EAAA0B,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAjB,KAAMZ,KAOV8B,SAAW,SAAAC,GACP,IAAIC,EAASD,EAAMC,OACfhB,EAAOgB,EAAOhB,KACdiB,EAAQD,EAAOC,MACP,iBAATjB,IACCiB,EAAQC,SAASD,IAGrBlC,EAAKoC,SAALV,OAAAW,EAAA,EAAAX,CAAA,GACKT,EAAOiB,KAfZlC,EAAKsB,MAAQ,CACTgB,WAAa,GACbC,cAAgB,GAJLvC,wEAqBV,IAGDwC,EAHCC,EAC0B5B,KAAKZ,MAA9ByC,EADDD,EACCC,MAAOC,EADRF,EACQE,QAASC,EADjBH,EACiBG,KADjBC,EAE4BhC,KAAKS,MAAjCgB,EAFAO,EAEAP,WAAYC,EAFZM,EAEYN,aAgDjB,OA7CGG,GAASA,EAAMI,OAAS,IAEpBR,GAA6B,KAAfA,IACbI,EAAQA,EAAMK,OAAO,SAAA7C,GACjB,OAAwD,IAAjDA,EAAKe,KAAK+B,cAAcC,QAAQX,MAK/CI,EAAQA,EAAMK,OAAO,SAAA7C,GACjB,OAAqB,IAAlBqC,EAA4BrC,EACN,IAAjBqC,GAA2C,IAAhBrC,EAAKY,QACZ,IAAhBZ,EAAKY,SAIlB6B,IACCD,EAAQA,EAAMK,OAAO,SAAA7C,GACjB,OAAqD,IAA9CA,EAAKe,KAAK+B,cAAcC,QAAQN,MAI5CC,IACgB,SAAZA,EAAKM,GACJR,EAAME,KAAK,SAAClC,EAAGyC,GACX,OAAGzC,EAAEO,KAAK+B,cAAgBG,EAAElC,KAAK+B,cAAsBJ,EAAKV,MACpDxB,EAAEO,KAAK+B,cAAgBG,EAAElC,KAAK+B,eAAuBJ,EAAKV,MACtD,IAEE,WAAZU,EAAKM,IACXR,EAAME,KAAK,SAAClC,EAAGyC,GACX,OAAGzC,EAAEI,OAASqC,EAAErC,QAAgB8B,EAAKV,MAC7BxB,EAAEI,OAASqC,EAAErC,OAAe8B,EAAKV,MAC7B,KAKxBM,EAAWE,EAAMU,IAAI,SAAClD,EAAMc,GACxB,OACIP,EAAAC,EAAAC,cAAC0C,EAAD,CAAUC,IAAKpD,EAAKC,GAAID,KAAMA,EAAMc,MAAOA,EAAQ,OAM3DP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2CACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,kDACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,OACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,QACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,UACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,YAGRH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOP,UAAU,eACzB2C,YAAY,iBACZtC,KAAK,aAAaiB,MAAOI,EACzBP,SAAUlB,KAAKkB,YAEvBtB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeK,KAAK,eAC9BiB,MAAOK,EAAcR,SAAUlB,KAAKkB,UACxCtB,EAAAC,EAAAC,cAAA,UAAQuB,OAAQ,GAAhB,OACAzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAO,GAAf,UACAzB,EAAAC,EAAAC,cAAA,UAAQuB,MAAO,GAAf,UAGRzB,EAAAC,EAAAC,cAAA,YAEF6B,aAzGPpB,aAmIRC,cAXS,SAACC,GAIrB,MAAO,CACHoB,MAAOpB,EAAMoB,MACbC,QAASrB,EAAMkC,OACfZ,KAAMtB,EAAMsB,OAIoB,KAAzBvB,CAA+BI,GCnIxCgC,cAEF,SAAAA,EAAYxD,GAAO,IAAAD,EAAA,OAAA0B,OAAAC,EAAA,EAAAD,CAAAb,KAAA4C,IACfzD,EAAA0B,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAA+B,GAAA3B,KAAAjB,KAAMZ,KAQVyD,aAAe,WACX1D,EAAKoC,SAAS,CACVjC,GAAK,GACLc,KAAO,GACPH,QAAS,KAbEd,EA8BnB2D,yBAA2B,SAAC1D,GAErBA,GAASA,EAAM2D,aAAuC,MAAxB3D,EAAM2D,YAAYzD,GAC/CH,EAAKoC,SAAS,CACVjC,GAAKF,EAAM2D,YAAYzD,GACvBc,KAAOhB,EAAM2D,YAAY3C,KACzBH,OAASb,EAAM2D,YAAY9C,SAG/Bd,EAAK0D,eAETG,QAAQC,IAAI9D,EAAKsB,QAzCFtB,EA4CnB+D,eAAiB,SAAC/B,GACd,IAAIC,EAASD,EAAMC,OACfhB,EAAOgB,EAAOhB,KACdiB,EAAQD,EAAOC,MAEP,WAATjB,IACCiB,EAAkB,SAAVA,GAEZlC,EAAKoC,SAALV,OAAAW,EAAA,EAAAX,CAAA,GACKT,EAAQiB,KArDElC,EAyDnBgE,WAAa,SAAChC,GACVA,EAAMiC,iBACNJ,QAAQC,IAAI9D,EAAKsB,OACjBtB,EAAKC,MAAM+D,WAAWhE,EAAKsB,OAC3BtB,EAAKM,eA7DUN,EAgEnBM,YAAc,WACVN,EAAK0D,eACL1D,EAAKC,MAAMK,eAhEXN,EAAKsB,MAAQ,CACTnB,GAAK,GACLc,KAAO,GACPH,QAAS,GALEd,oFAkBf6D,QAAQC,IAAI,uBAAwBjD,KAAKZ,OACzCY,KAAK8C,yBAAyB9C,KAAKZ,yDAMbiE,GACtBL,QAAQC,IAAI,uBAAwBI,GACpCrD,KAAK8C,yBAAyBO,oCA2C9B,OAAIrD,KAAKZ,MAAMkE,cAGX1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACU,KAAlBC,KAAKS,MAAMnB,GAAY,WAAa,gBAG9CM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,QAAMyD,SAAUvD,KAAKmD,YACjBvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,SACIQ,KAAK,OAAOP,UAAU,eAAeK,KAAK,OAAOoD,UAAQ,EAACC,WAAS,EACnEpC,MAAOrB,KAAKS,MAAML,KAAMc,SAAWlB,KAAKkD,kBAGhDtD,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeK,KAAK,SAC9BiB,MAAOrB,KAAKS,MAAMR,OAAQiB,SAAUlB,KAAKkD,gBAC7CtD,EAAAC,EAAAC,cAAA,UAAQuB,OAAO,GAAf,UACAzB,EAAAC,EAAAC,cAAA,UAAQuB,OAAO,GAAf,SACKzB,EAAAC,EAAAC,cAAA,WAETF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,SAASP,UAAU,mBAC5BH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBADpB,SADJ,OAIIH,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,SAASJ,QAAUF,KAAKP,YAAcM,UAAU,kBACzDH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBADpB,eA7BiB,UAxEtBQ,aAuIRC,cAtBS,SAACC,GACrB,MAAO,CACH6C,cAAe7C,EAAM6C,cACrBP,YAAatC,EAAMsC,cAKA,SAACrC,EAAUtB,GAClC,MAAO,CACH+D,WAAa,SAAC9D,GACVqB,EHxHY,SAACrB,GACrB,MAAO,CACHiB,KCTiB,YDUjBjB,QGqHasB,CAAiBtB,KAE9BI,YAAa,WACTiB,EHvGD,CACHJ,KC1BkB,kBEwIXE,CAA6CoC,GCvItDc,cAEF,SAAAA,EAAYtE,GAAO,IAAAD,EAAA,OAAA0B,OAAAC,EAAA,EAAAD,CAAAb,KAAA0D,IACfvE,EAAA0B,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAA6C,GAAAzC,KAAAjB,KAAMZ,KAMV8D,eAAiB,SAAC/B,GACdhC,EAAKoC,SAAS,CACVO,QAAUX,EAAMC,OAAOC,SATZlC,EAanBwE,SAAW,WACPxE,EAAKC,MAAMuE,SAASxE,EAAKsB,MAAMqB,UAZ/B3C,EAAKsB,MAAQ,CACTqB,QAAU,IAHC3C,wEAkBf,OACIS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,SACIM,KAAK,UAAUiB,MAAOrB,KAAKS,MAAMqB,QAASxB,KAAK,OAC/CP,UAAU,eAAe2C,YAAY,mBACrCxB,SAAUlB,KAAKkD,iBACnBtD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBACZH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBO,KAAK,SAASJ,QAASF,KAAK2D,UAC5D/D,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBADpB,qBA5BQQ,aA8CjBC,cAAQ,KARI,SAACE,EAAUtB,GAClC,MAAO,CACHuE,SAAU,SAAC7B,GACPpB,EJec,SAACoB,GACvB,MAAO,CACHxB,KCpDc,SDqDdwB,WIlBanB,CAAmBmB,OAKzBtB,CAAkCkD,GC9C3CE,cAEF,SAAAA,EAAYxE,GAAO,IAAAD,EAAA0B,OAAAC,EAAA,EAAAD,CAAAb,KAAA4D,IACfzE,EAAA0B,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAA+C,GAAA3C,KAAAjB,KAAMZ,KAgBVc,QAAU,SAAC2D,EAAQC,GACf,IAAIC,EAAU,CACV1B,GAAIwB,EACJxC,MAAOyC,GAGX3E,EAAKoC,SAAS,CACVQ,KAAMgC,IAGV5E,EAAKC,MAAM4E,OAAOD,GAElBE,aAAaC,QAAQ,YAAaC,KAAKC,UAAUL,KA3BjD,IAAIA,EAAUI,KAAKE,MAAMJ,aAAaK,QAAQ,cAF/B,OAIXnF,EAAKsB,MADNsD,EACc,CACThC,KAAMgC,GAGG,CACThC,KAAM,CACFM,GAAI,OACJhB,MAAO,IAXJlC,wEAgCV,IAAAoF,EAAAvE,KACA+B,EAAQ/B,KAAKS,MAAbsB,KAGL,OAFAiB,QAAQC,IAAIkB,KAAKC,UAAUpE,KAAKS,QAChCuC,QAAQC,IAAIjD,KAAKS,OAEbb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,UACIC,UAAU,kCACVO,KAAK,SAAShB,GAAG,gBAAgBkF,cAAY,WAC7CC,gBAAc,OAAOC,gBAAc,QAHvC,YAIe9E,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oCAE/BH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAgB4E,kBAAgB,iBAC1C/E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWG,QAAS,kBAAMqE,EAAKrE,QAAQ,OAAQ,KACzDN,EAAAC,EAAAC,cAAA,OAAKC,UAAsB,SAAVgC,EAAKM,IAA4B,IAAbN,EAAKV,MAAa,gBAAkB,IACrEzB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,8BADpB,cAIJH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWG,QAAS,kBAAMqE,EAAKrE,QAAQ,QAAS,KAC1DN,EAAAC,EAAAC,cAAA,OAAKC,UAAsB,SAAVgC,EAAKM,KAA6B,IAAdN,EAAKV,MAAc,gBAAkB,IACtEzB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,+BADpB,cAIJH,EAAAC,EAAAC,cAAA,MAAI8E,KAAK,YAAY7E,UAAU,YAC/BH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWG,QAAS,kBAAMqE,EAAKrE,QAAQ,SAAU,KAC3DN,EAAAC,EAAAC,cAAA,OAAKC,UAAsB,WAAVgC,EAAKM,IAA8B,IAAbN,EAAKV,MAAa,gBAAkB,IAA3E,kBAIJzB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWG,QAAS,kBAAMqE,EAAKrE,QAAQ,UAAW,KAC5DN,EAAAC,EAAAC,cAAA,OAAKC,UAAsB,WAAVgC,EAAKM,KAA+B,IAAdN,EAAKV,MAAc,gBAAkB,IAA5E,0BAjEEd,aAoFfC,cAAQ,KARI,SAACE,EAAUtB,GAClC,MAAO,CACH4E,OAAQ,SAACjC,GACLrB,ELfY,SAACqB,GACrB,MAAO,CACHzB,KC3DY,OD4DZyB,QKYapB,CAAiBoB,OAKvBvB,CAAkCoD,GCzElCiB,mLATP,OACIjF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACgF,EAAD,MACAlF,EAAAC,EAAAC,cAACiF,EAAD,cALUxE,aCIpByE,6MAEFC,UAAY,WACR9F,EAAKC,MAAMO,aACXR,EAAKC,MAAM8F,8FAGN,IACA5B,EAAiBtD,KAAKZ,MAAtBkE,cAED6B,EAAc7B,EACd1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAACsF,EAAD,OAEJxF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,KAEnB,OACIH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,6BAAwBF,EAAAC,EAAAC,cAAA,YAE5BF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVoF,EAEDvF,EAAAC,EAAAC,cAAA,OAAKC,WAA8B,IAAlBuD,EACT,sCACA,2CACJ1D,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,SAASP,UAAU,kBAAkBG,QAASF,KAAKiF,WAC5DrF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBADpB,iBAIAH,EAAAC,EAAAC,cAACuF,EAAD,MACAzF,EAAAC,EAAAC,cAACwF,EAAD,gBAhCN/E,aAgEHC,cAxBS,SAAAC,GACpB,MAAO,CACH6C,cAAe7C,EAAM6C,gBAIF,SAAC5C,EAAUtB,GAClC,MAAO,CACHmG,aAAc,WACV7E,EPzCD,CACHJ,KCfmB,iBMyDnBX,WAAY,WACRe,EPtCD,CACHJ,KCnBiB,eM8DjB4E,mBAAoB,WAChBxE,EPZD,CACHJ,KChD0B,0BMgEnBE,CAA6CwE,GC5DxCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sFChBFC,EAAO1B,KAAKE,MAAMJ,aAAaK,QAAQ,UACvCwB,EAAeD,GAAc,GAE7BE,EAAa,WACb,OAAOC,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,IAC3CH,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,KAG5CC,EAAY,SAACvE,EAAOvC,GACpB,IAAI+G,GAAO,EAMX,OALAxE,EAAMyE,QAAQ,SAACjH,EAAMc,GACdd,EAAKC,KAAOA,IACX+G,EAAMlG,KAGPkG,GA2DX,IAqCeE,EArCC,WAAkC,IAC1CpG,EAAOqG,EADE/F,EAAiCgG,UAAAxE,OAAA,QAAAyE,IAAAD,UAAA,GAAAA,UAAA,GAAzBX,EAAca,EAAWF,UAAAxE,OAAA,EAAAwE,UAAA,QAAAC,EAG9C,OAAOC,EAAOrG,MACV,IRhFgB,WQiFZ,OAAOG,EACX,IRjFiB,YQmFb,OADA+F,EAvCZ,SAA+B/F,EAAOkG,GAClC,IAAIC,EAAU,CACVtH,GAAIqH,EAAOtH,KAAKC,GAChBc,KAAMuG,EAAOtH,KAAKe,KAClBH,OAAQ0G,EAAOtH,KAAKY,QAExB,GAAG2G,EAAQtH,IAAqB,KAAfsH,EAAQtH,GAAW,CAEhC,IAAIa,EAAQiG,EAAU3F,EAAOmG,EAAQtH,KACvB,IAAXa,IACCM,EAAMN,GAASyG,QAInBA,EAAQtH,GAAKyG,IAIbtF,EAAMoG,KAAKD,GAIf,OADA3C,aAAaC,QAAQ,QAASC,KAAKC,UAAU3D,IACtCA,EAiBYqG,CAAsBrG,EAAOkG,GACjC9F,OAAAkG,EAAA,EAAAlG,CAAI2F,GAGf,IRlF0B,qBQqFtB,GAFAA,EAAQ3F,OAAAkG,EAAA,EAAAlG,CAAOJ,IAEA,KADfN,EAAQiG,EAAUI,EAAUG,EAAOrH,KACjB,CAKd,IAAI0H,EAASnG,OAAAoG,EAAA,EAAApG,CAAA,GAAO2F,EAASrG,IAC7B6G,EAAU/G,QAAU+G,EAAU/G,OAC9BuG,EAASrG,GAAS6G,EAClB/C,aAAaC,QAAQ,QAASC,KAAKC,UAAUoC,IAEjD,OAAOA,EAMX,IRpGmB,cQsGf,OADAA,EAzEZ,SAAiC/F,EAAOnB,GACpC,IAAIkH,EAAQ3F,OAAAkG,EAAA,EAAAlG,CAAOJ,GACfN,EAAQiG,EAAUI,EAAUlH,GAKhC,OAJc,IAAXa,IACCqG,EAASU,OAAO/G,EAAO,GACvB8D,aAAaC,QAAQ,QAASC,KAAKC,UAAUoC,KAE1CA,EAkEYW,CAAwB1G,EAAOkG,EAAOrH,IAErD,QAAS,OAAOmB,IC7FT8F,EAZC,WAAkC,IAAjC9F,EAAiCgG,UAAAxE,OAAA,QAAAyE,IAAAD,UAAA,IAAAA,UAAA,GAC9C,QAD8CA,UAAAxE,OAAA,EAAAwE,UAAA,QAAAC,GAChCpG,MACV,ITJmB,cSKf,OAAQG,EACZ,ITJiB,YSKb,OAAO,EACX,ITPkB,aSQd,OAAO,EACX,QAAS,OAAOA,ICVpBqF,EAAe,GAYJS,EAVC,WAAkC,IAAjC9F,EAAiCgG,UAAAxE,OAAA,QAAAyE,IAAAD,UAAA,GAAAA,UAAA,GAAzBX,EAAca,EAAWF,UAAAxE,OAAA,EAAAwE,UAAA,QAAAC,EAC9C,OAAOC,EAAOrG,MACV,IVCiB,YUAb,OAAOqG,EAAOtH,KAClB,IVA0B,qBUCtB,OAAOyG,EACX,QAAS,OAAOrF,ICIT8F,EATC,WAAkC,IAAjC9F,EAAiCgG,UAAAxE,OAAA,QAAAyE,IAAAD,UAAA,GAAAA,UAAA,GAF/B,GAEoBE,EAAWF,UAAAxE,OAAA,EAAAwE,UAAA,QAAAC,EAC9C,OAAOC,EAAOrG,MACV,IXGc,SWDV,OADA0C,QAAQC,IAAI0D,GACLA,EAAO7E,QAClB,QAAS,OAAOrB,ICRpBoF,EAAO1B,KAAKE,MAAMJ,aAAaK,QAAQ,cACvCwB,EAAeD,GAAc,CAC7BxD,GAAI,OACJhB,MAAO,GAYIkF,EATC,WAAkC,IAAjC9F,EAAiCgG,UAAAxE,OAAA,QAAAyE,IAAAD,UAAA,GAAAA,UAAA,GAAzBX,EAAca,EAAWF,UAAAxE,OAAA,EAAAwE,UAAA,QAAAC,EAC9C,OAAOC,EAAOrG,MACV,IZCY,OYCR,OADA0C,QAAQC,IAAIkB,KAAKC,UAAUuC,IACpBA,EAAO5E,KAClB,QAAS,OAAOtB,ICKT8F,EARGa,YAAgB,CAC9BvF,QACAyB,gBACAP,cACAJ,SACAZ,SCHEsF,EAAQC,YACVf,EAEAd,OAAO8B,8BAAgC9B,OAAO8B,gCAGlDC,IAASC,OACL7H,EAAAC,EAAAC,cAAC4H,EAAA,EAAD,CAAUL,MAAOA,GACbzH,EAAAC,EAAAC,cAAC6H,EAAD,OAEJC,SAASC,eAAe,SP2GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fc1d37c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskItem extends Component {\r\n\r\n    onUpdateStatus = () => {\r\n        this.props.onUpdateStatus(this.props.task.id);\r\n    }\r\n\r\n    onDeleteItem = () => {\r\n        this.props.onDeleteTask(this.props.task.id);\r\n        this.props.onCloseForm();\r\n    }\r\n\r\n    onEditTask = () => {\r\n        this.props.onOpenForm();\r\n        this.props.onEditTask(this.props.task);\r\n    }\r\n\r\n    showStatusElement(){\r\n        return (\r\n            <span className={this.props.task.status ? 'btn label label-danger' : 'btn label label-info'}\r\n                onClick={this.onUpdateStatus}>\r\n                { this.props.task.status === true ? 'Active' : 'Done' }\r\n            </span>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td>{ this.props.index }</td>\r\n                <td>{ this.props.task.name }</td>\r\n                <td className=\"text-center\">\r\n                    { this.showStatusElement() }\r\n                </td>\r\n                <td className=\"text-center\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-warning\"\r\n                        onClick={ this.onEditTask }>\r\n                        <span className=\"fa fa-pencil mr-5\"></span> Edit\r\n                    </button>\r\n                    &nbsp;\r\n                    <button\r\n                        type=\"button\" className=\"btn btn-danger\"\r\n                        onClick={ this.onDeleteItem }>\r\n                        <span className=\"fa fa-trash mr-5\"></span> Delete\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onUpdateStatus: (id) => {\r\n            dispatch(actions.updateStatus(id))\r\n        },\r\n        onDeleteTask: (id) => {\r\n            dispatch(actions.deleteTask(id));\r\n        },\r\n        onCloseForm: () => {\r\n            dispatch(actions.closeForm());\r\n        },\r\n        onOpenForm: () => {\r\n            dispatch(actions.openForm());\r\n        },\r\n        onEditTask: (task) => {\r\n            dispatch(actions.editTask(task));\r\n        }\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItem);","import * as types from './../constants/ActionTypes';\r\n\r\nexport const listAll = () => {\r\n    return {\r\n        type: types.LIST_ALL\r\n    }\r\n}\r\n\r\nexport const saveTask = (task) => {\r\n    return {\r\n        type: types.SAVE_TASK,\r\n        task    // task: task\r\n    }\r\n}\r\n\r\nexport const toggleForm = () => {\r\n    return {\r\n        type: types.TOGGLE_FORM\r\n    }\r\n}\r\n\r\nexport const openForm = () => {\r\n    return {\r\n        type: types.OPEN_FORM\r\n    }\r\n}\r\n\r\nexport const closeForm = () => {\r\n    return {\r\n        type: types.CLOSE_FORM\r\n    }\r\n}\r\n\r\nexport const updateStatus = (id) => {\r\n    return {\r\n        type: types.UPDATE_STATUS_TASK,\r\n        id\r\n    }\r\n}\r\n\r\nexport const deleteTask = (id) => {\r\n    return {\r\n        type: types.DELETE_TASK,\r\n        id\r\n    }\r\n}\r\n\r\nexport const editTask = (task) => {\r\n    return {\r\n        type: types.EDIT_TASK,\r\n        task\r\n    }\r\n}\r\n\r\nexport const clearItemEditing = () => {\r\n    return {\r\n        type: types.CLEAR_ITEM_EDITING\r\n    }\r\n}\r\n\r\nexport const searchTask = (keyword) => {\r\n    return {\r\n        type: types.SEARCH,\r\n        keyword\r\n    }\r\n}\r\n\r\n// sort = {by:..., value:...}\r\nexport const sortTask = (sort) => {\r\n    return {\r\n        type: types.SORT,\r\n        sort\r\n    }\r\n}","export const LIST_ALL = 'LIST_ALL';\r\nexport const SAVE_TASK = 'SAVE_TASK';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const CLOSE_FORM = 'CLOSE_FORM';\r\nexport const OPEN_FORM = 'OPEN_FORM';\r\nexport const UPDATE_STATUS_TASK = 'UPDATE_STATUS_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const CLEAR_ITEM_EDITING = 'CLEAR_ITEM_EDITING';\r\nexport const FILTER_TABLE = 'FILTER_TABLE'; // ko dùng\r\nexport const SEARCH = 'SEARCH';\r\nexport const SORT = 'SORT';\r\n","import React, { Component } from 'react';\r\nimport TaskItem from './TaskItem';\r\nimport {connect} from 'react-redux';\r\n\r\nclass TaskList extends Component {\r\n\r\n    // Phần filter KHÔNG dùng Redux, vì lưu ở state của component này là đủ rồi\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            filterName : '',\r\n            filterStatus : -1   //all: -1, active: 1, done: 0\r\n        };\r\n    }\r\n\r\n    onChange = event => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        if(name === \"filterStatus\") {\r\n            value = parseInt(value);\r\n        }\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var { tasks, keyword, sort } = this.props;\r\n        var {filterName, filterStatus} = this.state;\r\n        var elmTasks;\r\n        \r\n        if(tasks && tasks.length > 0) {\r\n            // filter by name\r\n            if(filterName && filterName !== '') {\r\n                tasks = tasks.filter(task => {\r\n                    return task.name.toLowerCase().indexOf(filterName) !== -1;\r\n                });\r\n            }\r\n\r\n            // filter by status\r\n            tasks = tasks.filter(task => {\r\n                if(filterStatus === -1) return task;\r\n                else if(filterStatus === 1) return task.status === true;\r\n                else return task.status === false;\r\n            });\r\n            \r\n            // search by name: It's exactly the same as filter by name\r\n            if(keyword) {\r\n                tasks = tasks.filter(task => {\r\n                    return task.name.toLowerCase().indexOf(keyword) !== -1;\r\n                });\r\n            }\r\n            \r\n            if(sort) {\r\n                if(sort.by === 'name') {\r\n                    tasks.sort((a, b) => {\r\n                        if(a.name.toLowerCase() > b.name.toLowerCase()) return sort.value;\r\n                        else if(a.name.toLowerCase() < b.name.toLowerCase()) return -sort.value;\r\n                        else return 0;\r\n                    });\r\n                } else if(sort.by === 'status') {\r\n                    tasks.sort((a, b) => {\r\n                        if(a.status > b.status) return -sort.value;\r\n                        else if(a.status < b.status) return sort.value;\r\n                        else return 0;\r\n                    });\r\n                }\r\n            }\r\n\r\n            elmTasks = tasks.map((task, index) => {\r\n                return (\r\n                    <TaskItem key={task.id} task={task} index={index + 1} />\r\n                )\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div className=\"row mt-15\">\r\n                <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                    <table className=\"table table-bordered table-hover table-striped\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"text-center\">STT</th>\r\n                                <th className=\"text-center\">Name</th>\r\n                                <th className=\"text-center\">Status</th>\r\n                                <th className=\"text-center\">Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td></td>\r\n                                <td>\r\n                                    <input type=\"text\" className=\"form-control\"\r\n                                        placeholder=\"Filter by name\"\r\n                                        name=\"filterName\" value={filterName}\r\n                                        onChange={this.onChange} />\r\n                                </td>\r\n                                <td>\r\n                                    <select className=\"form-control\" name=\"filterStatus\"\r\n                                            value={filterStatus} onChange={this.onChange}>\r\n                                        <option value={-1}>All</option>\r\n                                        <option value={1}>Active</option>\r\n                                        <option value={0}>Done</option>\r\n                                    </select>\r\n                                </td>\r\n                                <td></td>\r\n                            </tr>\r\n                            { elmTasks }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// pass state from store to props of this component\r\n// At this point, this component will have a props = tasks:\r\n// this.props.tasks\r\n// @param state: state của store, giá trị nào mà nhiều component\r\n// dùng chung thì nên cho vào state của store thay vì lưu ở state\r\n// của chính component đó.\r\nconst mapStateToProps = (state) => {\r\n    // state này là 1 json gồm các key (phần tử) được định nghĩa ở\r\n    // reducer (trong file /reducers/index.js)\r\n    // console.log(\"Thử in state ra sẽ thấy nó gồm những gì: \", state);\r\n    return {\r\n        tasks: state.tasks,\r\n        keyword: state.search,\r\n        sort: state.sort\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(TaskList);","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id : '',\r\n            name : '',\r\n            status : true\r\n        };\r\n    }\r\n\r\n    onClearState = () => {\r\n        this.setState({\r\n            id : '',\r\n            name : '',\r\n            status : true\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        console.log(\"componentWillMount: \", this.props)\r\n        this.addOrUpdateTaskFromProps(this.props);\r\n    }\r\n\r\n    // componentWillReceiveProps is required if you want to update\r\n    // the state values with new props values, this method will get called\r\n    // whenever any change happens to props values\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log(\"componentWillMount: \", nextProps)\r\n        this.addOrUpdateTaskFromProps(nextProps);\r\n    }\r\n\r\n    addOrUpdateTaskFromProps = (props) => {\r\n        // if(a != null) tương đương với if(a !== null && a !== undefined)\r\n        if(props && props.itemEditing && props.itemEditing.id != null){\r\n            this.setState({\r\n                id : props.itemEditing.id,\r\n                name : props.itemEditing.name,\r\n                status : props.itemEditing.status\r\n            });\r\n        } else{\r\n            this.onClearState();\r\n        }\r\n        console.log(this.state)\r\n    }\r\n\r\n    onHandleChange = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n\r\n        if(name === 'status')\r\n            value = value === \"true\" ? true : false;\r\n        \r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    onSaveTask = (event) => {\r\n        event.preventDefault();\r\n        console.log(this.state)\r\n        this.props.onSaveTask(this.state);\r\n        this.onCloseForm();\r\n    }\r\n\r\n    onCloseForm = () => {\r\n        this.onClearState();\r\n        this.props.onCloseForm();\r\n    }\r\n\r\n    render() {\r\n        if(!this.props.isDisplayForm) return '';\r\n\r\n        return (\r\n            <div className=\"panel panel-warning\">\r\n                <div className=\"panel-heading\">\r\n                    <h3 className=\"panel-title\">\r\n                        { this.state.id === \"\" ? 'Add task' : 'Update task' }\r\n                    </h3>\r\n                </div>\r\n                <div className=\"panel-body\">\r\n                    <form onSubmit={this.onSaveTask} >\r\n                        <div className=\"form-group\">\r\n                            <label>Task's name :</label>\r\n                            <input\r\n                                type=\"text\" className=\"form-control\" name=\"name\" required autoFocus \r\n                                value={this.state.name} onChange={ this.onHandleChange } />\r\n                        </div>\r\n\r\n                        <label>Status :</label>\r\n                        <select className=\"form-control\" name=\"status\"\r\n                                value={this.state.status} onChange={this.onHandleChange}>\r\n                            <option value={true}>Active</option>\r\n                            <option value={false}>Done</option>\r\n                        </select><br/>\r\n\r\n                        <div className=\"text-center\">\r\n                            <button type=\"submit\" className=\"btn btn-warning\">\r\n                                <span className=\"fa fa-plus mr-5\"></span> Save\r\n                            </button>&nbsp;\r\n                            <button type=\"button\" onClick={ this.onCloseForm } className=\"btn btn-danger\">\r\n                                <span className=\"fa fa-close mr-5\"></span> Cancel\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// pass state from store to props of this component\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isDisplayForm: state.isDisplayForm,\r\n        itemEditing: state.itemEditing\r\n    }\r\n}\r\n\r\n// this component will have a prop named: 'onSaveTask'\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSaveTask : (task) => {\r\n            dispatch(actions.saveTask(task));\r\n        },\r\n        onCloseForm: () => {\r\n            dispatch(actions.closeForm());\r\n        }\r\n    }\r\n}\r\n\r\n// khi dùng hàm connect thì có 2 chức năng sau:\r\n// chuyển state của store thành props của component này, hoặc\r\n// chuyển hàm dispatch thành props của component này (thể thực thi action)\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm);","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskSearchControl extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            keyword : ''\r\n        }\r\n    }\r\n\r\n    onHandleChange = (event) => {\r\n        this.setState({\r\n            keyword : event.target.value\r\n        });\r\n    }\r\n\r\n    onSearch = () => {\r\n        this.props.onSearch(this.state.keyword);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"input-group\">\r\n                    <input\r\n                        name=\"keyword\" value={this.state.keyword} type=\"text\"\r\n                        className=\"form-control\" placeholder=\"Enter keyword...\"\r\n                        onChange={this.onHandleChange} />\r\n                    <span className=\"input-group-btn\">\r\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={this.onSearch}>\r\n                            <span className=\"fa fa-search mr-5\"></span> Search\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSearch: (keyword) => {\r\n            dispatch(actions.searchTask(keyword))\r\n        },\r\n    };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(TaskSearchControl);","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskSortControl extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        var sortObj = JSON.parse(localStorage.getItem(\"sortTasks\"));\r\n        if(sortObj) {\r\n            this.state = {\r\n                sort: sortObj\r\n            }\r\n        } else {\r\n            this.state = {\r\n                sort: {\r\n                    by: 'name',\r\n                    value: 1\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onClick = (sortBy, sortValue) => {\r\n        let sortObj = {\r\n            by: sortBy,\r\n            value: sortValue\r\n        }\r\n\r\n        this.setState({\r\n            sort: sortObj\r\n        });\r\n\r\n        this.props.onSort(sortObj);\r\n\r\n        localStorage.setItem(\"sortTasks\", JSON.stringify(sortObj));\r\n    }\r\n\r\n    render() {\r\n        var {sort} = this.state;\r\n        console.log(JSON.stringify(this.state));\r\n        console.log(this.state);\r\n        return (\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"dropdown\">\r\n                    <button\r\n                        className=\"btn btn-primary dropdown-toggle\"\r\n                        type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\"\r\n                        aria-haspopup=\"true\" aria-expanded=\"true\" >\r\n                        Sort &nbsp;<span className=\"fa fa-caret-square-o-down ml-5\"></span>\r\n                    </button>\r\n                    <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                        <li className=\"btn_sort\" onClick={() => this.onClick('name', 1)}>\r\n                            <div className={(sort.by==='name' && sort.value===1) ? 'sort_selected' : ''}>\r\n                                <span className=\"fa fa-sort-alpha-asc pr-5\"></span> Name A-Z\r\n                            </div>\r\n                        </li>\r\n                        <li className=\"btn_sort\" onClick={() => this.onClick('name', -1)}>\r\n                            <div className={(sort.by==='name' && sort.value===-1) ? 'sort_selected' : ''}>\r\n                                <span className=\"fa fa-sort-alpha-desc pr-5\"></span> Name Z-A\r\n                            </div>\r\n                        </li>\r\n                        <li role=\"separator\" className=\"divider\"></li>\r\n                        <li className=\"btn_sort\" onClick={() => this.onClick('status', 1)}>\r\n                            <div className={(sort.by==='status' && sort.value===1) ? 'sort_selected' : ''}>\r\n                                Status active\r\n                            </div>\r\n                        </li>\r\n                        <li className=\"btn_sort\" onClick={() => this.onClick('status', -1)}>\r\n                            <div className={(sort.by==='status' && sort.value===-1) ? 'sort_selected' : ''}>\r\n                                Status done\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSort: (sort) => {\r\n            dispatch(actions.sortTask(sort))\r\n        },\r\n    };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(TaskSortControl);","import React, { Component } from 'react';\r\nimport TaskSearchControl from './TaskSearchControl';\r\nimport TaskSortControl from './TaskSortControl';\r\n\r\nclass TaskControl extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row mt-15\">\r\n                <TaskSearchControl />\r\n                <TaskSortControl />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskControl;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport TaskList from './components/TaskList';\nimport TaskForm from './components/TaskForm';\nimport TaskControl from './components/TaskControl';\nimport {connect} from 'react-redux';\nimport * as actions from './actions/index';\n\nclass App extends Component {\n\n    onAddTask = () => {\n        this.props.onOpenForm();\n        this.props.onClearItemEditing();\n    }\n\n    render() {\n        var {isDisplayForm} = this.props;\n\n        var elmTaskForm = isDisplayForm ?\n            <div className='col-xs-4 col-sm-4 col-md-4 col-lg-4'>\n                <TaskForm />\n            </div> :\n            <div className=''></div>;\n\n        return (\n            <div className=\"container\">\n                <div className=\"text-center\">\n                    <h3>Task management</h3><hr/>\n                </div>\n                <div className=\"row\">\n                    {elmTaskForm}\n\n                    <div className={ isDisplayForm === true ?\n                            'col-xs-8 col-sm-8 col-md-8 col-lg-8' :\n                            'col-xs-12 col-sm-12 col-md-12 col-lg-12' }>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.onAddTask}>\n                            <span className=\"fa fa-plus mr-5\"></span>&nbsp;\n                            Add task\n                        </button>\n                        <TaskControl />\n                        <TaskList />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isDisplayForm: state.isDisplayForm\n    };\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        onToggleForm: () => {\n            dispatch(actions.toggleForm());\n        },\n        onOpenForm: () => {\n            dispatch(actions.openForm());\n        },\n        // Dùng cái dưới ở bên TaskForm.js\n        // onCloseForm: () => {\n        //     dispatch(actions.closeForm());\n        // }\n        onClearItemEditing: () => {\n            dispatch(actions.clearItemEditing());\n        }\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from './../constants/ActionTypes';\r\n\r\nvar data = JSON.parse(localStorage.getItem(\"tasks\"));\r\nvar initialState = data ? data : [];\r\n\r\nvar generateID = () => {\r\n    return Math.random().toString(36).substring(2, 15) +\r\n        Math.random().toString(36).substring(2, 15);\r\n}\r\n\r\nvar findIndex = (tasks, id) => {\r\n    let res = -1;\r\n    tasks.forEach((task, index) => {\r\n        if(task.id === id) {\r\n            res = index;\r\n        }\r\n    })\r\n    return res;\r\n}\r\n\r\nfunction getStateAfterUpdateStatus(state, id) {\r\n    let newState = [...state];\r\n    console.log(\"before: \", JSON.stringify(newState));\r\n    let index = findIndex(state, id);\r\n    if(index !== -1) {\r\n        let cloneTask = newState[index];\r\n        cloneTask.status = !cloneTask.status;\r\n        newState[index] = cloneTask;\r\n        localStorage.setItem(\"tasks\", JSON.stringify(newState));\r\n    }\r\n    console.log(\"after: \", JSON.stringify(newState));\r\n    return newState;\r\n}\r\n\r\nfunction getStateAfterDeleteTask(state, id) {\r\n    let newState = [...state];\r\n    let index = findIndex(newState, id);\r\n    if(index !== -1) {\r\n        newState.splice(index, 1);\r\n        localStorage.setItem(\"tasks\", JSON.stringify(newState));\r\n    }\r\n    return newState;\r\n}\r\n\r\nfunction getStateAfterSaveTask(state, action) {\r\n    let newTask = {\r\n        id: action.task.id,\r\n        name: action.task.name,\r\n        status: action.task.status\r\n    }\r\n    if(newTask.id && newTask.id !== \"\") {\r\n        // update task\r\n        let index = findIndex(state, newTask.id);\r\n        if(index !== -1) {\r\n            state[index] = newTask;\r\n        }\r\n    } else{\r\n        // add new task\r\n        newTask.id = generateID();\r\n\r\n        // làm như này là thay đổi state cũ: KHÔNG NÊN DÙNG\r\n        // Dùng cách khác như nào???\r\n        state.push(newTask);\r\n    }\r\n    \r\n    localStorage.setItem(\"tasks\", JSON.stringify(state));\r\n    return state;\r\n}\r\n\r\n// State của reducer này là 1 mảng các task\r\n// Mày nghĩ dùng như này:\r\n// newState = [...state];\r\n// thì nếu thay đổi newState sẽ ko ảnh hưởng tới state?\r\n// Nhầm rồi thằng ngu! newState và state vẫn tham chiếu tới 1 ô nhớ\r\n// Do đó thay đổi 1 thằng thì thằng kia thay đổi theo\r\n// Thế rốt cuộc tạo pure function như nào để ko thay đổi state?\r\nvar myReducer = (state = initialState, action) => {\r\n    let index, newState;\r\n\r\n    switch(action.type) {\r\n        case types.LIST_ALL:\r\n            return state;\r\n        case types.SAVE_TASK:\r\n            newState = getStateAfterSaveTask(state, action);\r\n            return [...newState];\r\n            // Tại sao dùng như dưới ko được?\r\n            //return newState;\r\n        case types.UPDATE_STATUS_TASK:\r\n            newState = [...state];\r\n            index = findIndex(newState, action.id);\r\n            if (index !== -1) {\r\n                // làm như sau nó update state được nhưng ko render lại trên view\r\n                // newState[index].status = !newState[index].status;\r\n\r\n                // phải làm như sau: tạo 1 task mới rồi thay thế task hiện tại trong mảng\r\n                var cloneTask = {...newState[index]};\r\n                cloneTask.status = !cloneTask.status;\r\n                newState[index] = cloneTask;\r\n                localStorage.setItem(\"tasks\", JSON.stringify(newState));\r\n            }\r\n            return newState;\r\n\r\n            // TẠI SAO DÙNG function LẠI KO ĐƯỢC???\r\n            // newState = getStateAfterUpdateStatus(state, action.id);\r\n            // return newState;\r\n            // return [...newState];\r\n        case types.DELETE_TASK:\r\n            newState = getStateAfterDeleteTask(state, action.id);\r\n            return newState;\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = false;   // close form\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case types.TOGGLE_FORM:\r\n            return !state;\r\n        case types.OPEN_FORM:\r\n            return true;\r\n        case types.CLOSE_FORM:\r\n            return false;\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = {};\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case types.EDIT_TASK:\r\n            return action.task;\r\n        case types.CLEAR_ITEM_EDITING:\r\n            return initialState;\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\n// state của reducer chỉ là 1 String, là keyword cần search\r\nvar initialState = '';\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case types.SEARCH:\r\n            console.log(action)\r\n            return action.keyword;\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nvar data = JSON.parse(localStorage.getItem(\"sortTasks\"));\r\nvar initialState = data ? data : {\r\n    by: 'name',\r\n    value: 1\r\n};\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case types.SORT:\r\n            console.log(JSON.stringify(action))\r\n            return action.sort;\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import {combineReducers} from 'redux';\r\nimport tasks from './tasks';\r\nimport isDisplayForm from './isDisplayForm';\r\nimport itemEditing from './itemEditing';\r\nimport search from './search';\r\nimport sort from './sort';\r\n\r\n// tham số của hàm combineReducers chính là giá trị state của store,\r\n// tham số này là 1 JSON, mỗi 1 phần tử trong JSON chính là 1 reducer.\r\n// Mỗi 1 reducer phải return 1 Object, đó là 1 phần của state của store\r\nconst myReducer = combineReducers({\r\n    tasks,  // tasks: tasks,\r\n    isDisplayForm,\r\n    itemEditing,\r\n    search,\r\n    sort\r\n})\r\n\r\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport myReducer from './reducers/index';\nimport {Provider} from 'react-redux';\n\n// \"When the store is created, Redux immediately calls the reducers\n// and uses their return values as initial state.\"\n// (https://css-tricks.com/learning-react-redux/)\nconst store = createStore(\n    myReducer,\n    // add this line to use Redux tool in Chrome\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}